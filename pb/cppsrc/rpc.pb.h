// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef PROTOBUF_rpc_2eproto__INCLUDED
#define PROTOBUF_rpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace RPC {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpc_2eproto();
void protobuf_AssignDesc_rpc_2eproto();
void protobuf_ShutdownFile_rpc_2eproto();

class RpcHeader;

enum ServerID {
  MASTER = 1
};
bool ServerID_IsValid(int value);
const ServerID ServerID_MIN = MASTER;
const ServerID ServerID_MAX = MASTER;
const int ServerID_ARRAYSIZE = ServerID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerID_descriptor();
inline const ::std::string& ServerID_Name(ServerID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerID_descriptor(), value);
}
inline bool ServerID_Parse(
    const ::std::string& name, ServerID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerID>(
    ServerID_descriptor(), name, value);
}
enum MethodID {
  RegisterServer = 1
};
bool MethodID_IsValid(int value);
const MethodID MethodID_MIN = RegisterServer;
const MethodID MethodID_MAX = RegisterServer;
const int MethodID_ARRAYSIZE = MethodID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MethodID_descriptor();
inline const ::std::string& MethodID_Name(MethodID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MethodID_descriptor(), value);
}
inline bool MethodID_Parse(
    const ::std::string& name, MethodID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MethodID>(
    MethodID_descriptor(), name, value);
}
// ===================================================================

class RpcHeader : public ::google::protobuf::Message {
 public:
  RpcHeader();
  virtual ~RpcHeader();

  RpcHeader(const RpcHeader& from);

  inline RpcHeader& operator=(const RpcHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcHeader& default_instance();

  void Swap(RpcHeader* other);

  // implements Message ----------------------------------------------

  RpcHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcHeader& from);
  void MergeFrom(const RpcHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RPC.ServerID server = 1;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 1;
  inline ::RPC::ServerID server() const;
  inline void set_server(::RPC::ServerID value);

  // required .RPC.MethodID method = 2;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 2;
  inline ::RPC::MethodID method() const;
  inline void set_method(::RPC::MethodID value);

  // @@protoc_insertion_point(class_scope:RPC.RpcHeader)
 private:
  inline void set_has_server();
  inline void clear_has_server();
  inline void set_has_method();
  inline void clear_has_method();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int server_;
  int method_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static RpcHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcHeader

// required .RPC.ServerID server = 1;
inline bool RpcHeader::has_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcHeader::set_has_server() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcHeader::clear_has_server() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcHeader::clear_server() {
  server_ = 1;
  clear_has_server();
}
inline ::RPC::ServerID RpcHeader::server() const {
  return static_cast< ::RPC::ServerID >(server_);
}
inline void RpcHeader::set_server(::RPC::ServerID value) {
  assert(::RPC::ServerID_IsValid(value));
  set_has_server();
  server_ = value;
}

// required .RPC.MethodID method = 2;
inline bool RpcHeader::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcHeader::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcHeader::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcHeader::clear_method() {
  method_ = 1;
  clear_has_method();
}
inline ::RPC::MethodID RpcHeader::method() const {
  return static_cast< ::RPC::MethodID >(method_);
}
inline void RpcHeader::set_method(::RPC::MethodID value) {
  assert(::RPC::MethodID_IsValid(value));
  set_has_method();
  method_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RPC

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RPC::ServerID>() {
  return ::RPC::ServerID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RPC::MethodID>() {
  return ::RPC::MethodID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_2eproto__INCLUDED
