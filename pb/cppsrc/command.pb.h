// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#ifndef PROTOBUF_command_2eproto__INCLUDED
#define PROTOBUF_command_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace Command {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_command_2eproto();
void protobuf_AssignDesc_command_2eproto();
void protobuf_ShutdownFile_command_2eproto();


enum ErrorCode {
  Success = 0
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = Success;
const ErrorCode ErrorCode_MAX = Success;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum ServiceType {
  Login = 1
};
bool ServiceType_IsValid(int value);
const ServiceType ServiceType_MIN = Login;
const ServiceType ServiceType_MAX = Login;
const int ServiceType_ARRAYSIZE = ServiceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceType_descriptor();
inline const ::std::string& ServiceType_Name(ServiceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceType_descriptor(), value);
}
inline bool ServiceType_Parse(
    const ::std::string& name, ServiceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceType>(
    ServiceType_descriptor(), name, value);
}
enum ChannelID {
  Normal = 1
};
bool ChannelID_IsValid(int value);
const ChannelID ChannelID_MIN = Normal;
const ChannelID ChannelID_MAX = Normal;
const int ChannelID_ARRAYSIZE = ChannelID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChannelID_descriptor();
inline const ::std::string& ChannelID_Name(ChannelID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChannelID_descriptor(), value);
}
inline bool ChannelID_Parse(
    const ::std::string& name, ChannelID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChannelID>(
    ChannelID_descriptor(), name, value);
}
enum MessageID {
  RegisterRequest = 257,
  RegisterResponse = 258
};
bool MessageID_IsValid(int value);
const MessageID MessageID_MIN = RegisterRequest;
const MessageID MessageID_MAX = RegisterResponse;
const int MessageID_ARRAYSIZE = MessageID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageID_descriptor();
inline const ::std::string& MessageID_Name(MessageID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageID_descriptor(), value);
}
inline bool MessageID_Parse(
    const ::std::string& name, MessageID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageID>(
    MessageID_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace Command

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Command::ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Command::ErrorCode>() {
  return ::Command::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::Command::ServiceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Command::ServiceType>() {
  return ::Command::ServiceType_descriptor();
}
template <> struct is_proto_enum< ::Command::ChannelID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Command::ChannelID>() {
  return ::Command::ChannelID_descriptor();
}
template <> struct is_proto_enum< ::Command::MessageID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Command::MessageID>() {
  return ::Command::MessageID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_command_2eproto__INCLUDED
