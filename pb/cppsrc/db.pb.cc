// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DB {

namespace {

const ::google::protobuf::Descriptor* Tbl_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tbl_User_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChannelType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_2eproto() {
  protobuf_AddDesc_db_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db.proto");
  GOOGLE_CHECK(file != NULL);
  Tbl_User_descriptor_ = file->message_type(0);
  static const int Tbl_User_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tbl_User, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tbl_User, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tbl_User, registertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tbl_User, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tbl_User, logintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tbl_User, islogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tbl_User, money1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tbl_User, money2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tbl_User, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tbl_User, bytemsg_),
  };
  Tbl_User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tbl_User_descriptor_,
      Tbl_User::default_instance_,
      Tbl_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tbl_User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tbl_User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tbl_User));
  ChannelType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tbl_User_descriptor_, &Tbl_User::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_2eproto() {
  delete Tbl_User::default_instance_;
  delete Tbl_User_reflection_;
}

void protobuf_AddDesc_db_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010db.proto\022\002DB\"\270\001\n\010Tbl_User\022\013\n\003uid\030\001 \002(\003"
    "\022\017\n\007channel\030\002 \002(\005\022\024\n\014registerTime\030\003 \002(\004\022"
    "\025\n\rlastLoginTime\030\004 \002(\004\022\022\n\nloginTimes\030\005 \002"
    "(\r\022\017\n\007isLogin\030\006 \002(\010\022\016\n\006money1\030\007 \002(\001\022\016\n\006m"
    "oney2\030\010 \002(\002\022\013\n\003msg\030\t \002(\t\022\017\n\007byteMsg\030\n \002("
    "\014*$\n\013ChannelType\022\013\n\007Invalid\020\000\022\010\n\004Joy7\020\021B"
    "\016\n\010protocolB\002DB", 255);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db.proto", &protobuf_RegisterTypes);
  Tbl_User::default_instance_ = new Tbl_User();
  Tbl_User::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_2eproto {
  StaticDescriptorInitializer_db_2eproto() {
    protobuf_AddDesc_db_2eproto();
  }
} static_descriptor_initializer_db_2eproto_;
const ::google::protobuf::EnumDescriptor* ChannelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelType_descriptor_;
}
bool ChannelType_IsValid(int value) {
  switch(value) {
    case 0:
    case 17:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Tbl_User::kUidFieldNumber;
const int Tbl_User::kChannelFieldNumber;
const int Tbl_User::kRegisterTimeFieldNumber;
const int Tbl_User::kLastLoginTimeFieldNumber;
const int Tbl_User::kLoginTimesFieldNumber;
const int Tbl_User::kIsLoginFieldNumber;
const int Tbl_User::kMoney1FieldNumber;
const int Tbl_User::kMoney2FieldNumber;
const int Tbl_User::kMsgFieldNumber;
const int Tbl_User::kByteMsgFieldNumber;
#endif  // !_MSC_VER

Tbl_User::Tbl_User()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB.Tbl_User)
}

void Tbl_User::InitAsDefaultInstance() {
}

Tbl_User::Tbl_User(const Tbl_User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB.Tbl_User)
}

void Tbl_User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  channel_ = 0;
  registertime_ = GOOGLE_ULONGLONG(0);
  lastlogintime_ = GOOGLE_ULONGLONG(0);
  logintimes_ = 0u;
  islogin_ = false;
  money1_ = 0;
  money2_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tbl_User::~Tbl_User() {
  // @@protoc_insertion_point(destructor:DB.Tbl_User)
  SharedDtor();
}

void Tbl_User::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (bytemsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bytemsg_;
  }
  if (this != default_instance_) {
  }
}

void Tbl_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tbl_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tbl_User_descriptor_;
}

const Tbl_User& Tbl_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();
  return *default_instance_;
}

Tbl_User* Tbl_User::default_instance_ = NULL;

Tbl_User* Tbl_User::New() const {
  return new Tbl_User;
}

void Tbl_User::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Tbl_User*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, money2_);
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
    if (has_bytemsg()) {
      if (bytemsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bytemsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tbl_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB.Tbl_User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // required int32 channel = 2;
      case 2: {
        if (tag == 16) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_registerTime;
        break;
      }

      // required uint64 registerTime = 3;
      case 3: {
        if (tag == 24) {
         parse_registerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &registertime_)));
          set_has_registertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lastLoginTime;
        break;
      }

      // required uint64 lastLoginTime = 4;
      case 4: {
        if (tag == 32) {
         parse_lastLoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastlogintime_)));
          set_has_lastlogintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_loginTimes;
        break;
      }

      // required uint32 loginTimes = 5;
      case 5: {
        if (tag == 40) {
         parse_loginTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logintimes_)));
          set_has_logintimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isLogin;
        break;
      }

      // required bool isLogin = 6;
      case 6: {
        if (tag == 48) {
         parse_isLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islogin_)));
          set_has_islogin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_money1;
        break;
      }

      // required double money1 = 7;
      case 7: {
        if (tag == 57) {
         parse_money1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money1_)));
          set_has_money1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_money2;
        break;
      }

      // required float money2 = 8;
      case 8: {
        if (tag == 69) {
         parse_money2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &money2_)));
          set_has_money2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_msg;
        break;
      }

      // required string msg = 9;
      case 9: {
        if (tag == 74) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_byteMsg;
        break;
      }

      // required bytes byteMsg = 10;
      case 10: {
        if (tag == 82) {
         parse_byteMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytemsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB.Tbl_User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB.Tbl_User)
  return false;
#undef DO_
}

void Tbl_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB.Tbl_User)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // required uint64 registerTime = 3;
  if (has_registertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->registertime(), output);
  }

  // required uint64 lastLoginTime = 4;
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lastlogintime(), output);
  }

  // required uint32 loginTimes = 5;
  if (has_logintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->logintimes(), output);
  }

  // required bool isLogin = 6;
  if (has_islogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->islogin(), output);
  }

  // required double money1 = 7;
  if (has_money1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->money1(), output);
  }

  // required float money2 = 8;
  if (has_money2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->money2(), output);
  }

  // required string msg = 9;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->msg(), output);
  }

  // required bytes byteMsg = 10;
  if (has_bytemsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->bytemsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB.Tbl_User)
}

::google::protobuf::uint8* Tbl_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB.Tbl_User)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // required uint64 registerTime = 3;
  if (has_registertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->registertime(), target);
  }

  // required uint64 lastLoginTime = 4;
  if (has_lastlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lastlogintime(), target);
  }

  // required uint32 loginTimes = 5;
  if (has_logintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->logintimes(), target);
  }

  // required bool isLogin = 6;
  if (has_islogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->islogin(), target);
  }

  // required double money1 = 7;
  if (has_money1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->money1(), target);
  }

  // required float money2 = 8;
  if (has_money2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->money2(), target);
  }

  // required string msg = 9;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->msg(), target);
  }

  // required bytes byteMsg = 10;
  if (has_bytemsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->bytemsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB.Tbl_User)
  return target;
}

int Tbl_User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // required int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // required uint64 registerTime = 3;
    if (has_registertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->registertime());
    }

    // required uint64 lastLoginTime = 4;
    if (has_lastlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastlogintime());
    }

    // required uint32 loginTimes = 5;
    if (has_logintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logintimes());
    }

    // required bool isLogin = 6;
    if (has_islogin()) {
      total_size += 1 + 1;
    }

    // required double money1 = 7;
    if (has_money1()) {
      total_size += 1 + 8;
    }

    // required float money2 = 8;
    if (has_money2()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string msg = 9;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // required bytes byteMsg = 10;
    if (has_bytemsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytemsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tbl_User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tbl_User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tbl_User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tbl_User::MergeFrom(const Tbl_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_registertime()) {
      set_registertime(from.registertime());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
    if (from.has_logintimes()) {
      set_logintimes(from.logintimes());
    }
    if (from.has_islogin()) {
      set_islogin(from.islogin());
    }
    if (from.has_money1()) {
      set_money1(from.money1());
    }
    if (from.has_money2()) {
      set_money2(from.money2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_bytemsg()) {
      set_bytemsg(from.bytemsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tbl_User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tbl_User::CopyFrom(const Tbl_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tbl_User::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void Tbl_User::Swap(Tbl_User* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(channel_, other->channel_);
    std::swap(registertime_, other->registertime_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(logintimes_, other->logintimes_);
    std::swap(islogin_, other->islogin_);
    std::swap(money1_, other->money1_);
    std::swap(money2_, other->money2_);
    std::swap(msg_, other->msg_);
    std::swap(bytemsg_, other->bytemsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tbl_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tbl_User_descriptor_;
  metadata.reflection = Tbl_User_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DB

// @@protoc_insertion_point(global_scope)
