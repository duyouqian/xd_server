// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#ifndef PROTOBUF_db_2eproto__INCLUDED
#define PROTOBUF_db_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace DB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_db_2eproto();
void protobuf_AssignDesc_db_2eproto();
void protobuf_ShutdownFile_db_2eproto();

class Tbl_User;

enum ChannelType {
  Invalid = 0,
  Joy7 = 17
};
bool ChannelType_IsValid(int value);
const ChannelType ChannelType_MIN = Invalid;
const ChannelType ChannelType_MAX = Joy7;
const int ChannelType_ARRAYSIZE = ChannelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChannelType_descriptor();
inline const ::std::string& ChannelType_Name(ChannelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChannelType_descriptor(), value);
}
inline bool ChannelType_Parse(
    const ::std::string& name, ChannelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChannelType>(
    ChannelType_descriptor(), name, value);
}
// ===================================================================

class Tbl_User : public ::google::protobuf::Message {
 public:
  Tbl_User();
  virtual ~Tbl_User();

  Tbl_User(const Tbl_User& from);

  inline Tbl_User& operator=(const Tbl_User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tbl_User& default_instance();

  void Swap(Tbl_User* other);

  // implements Message ----------------------------------------------

  Tbl_User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tbl_User& from);
  void MergeFrom(const Tbl_User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // required int32 channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // required uint64 registerTime = 3;
  inline bool has_registertime() const;
  inline void clear_registertime();
  static const int kRegisterTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 registertime() const;
  inline void set_registertime(::google::protobuf::uint64 value);

  // required uint64 lastLoginTime = 4;
  inline bool has_lastlogintime() const;
  inline void clear_lastlogintime();
  static const int kLastLoginTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 lastlogintime() const;
  inline void set_lastlogintime(::google::protobuf::uint64 value);

  // required uint32 loginTimes = 5;
  inline bool has_logintimes() const;
  inline void clear_logintimes();
  static const int kLoginTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 logintimes() const;
  inline void set_logintimes(::google::protobuf::uint32 value);

  // required bool isLogin = 6;
  inline bool has_islogin() const;
  inline void clear_islogin();
  static const int kIsLoginFieldNumber = 6;
  inline bool islogin() const;
  inline void set_islogin(bool value);

  // required double money1 = 7;
  inline bool has_money1() const;
  inline void clear_money1();
  static const int kMoney1FieldNumber = 7;
  inline double money1() const;
  inline void set_money1(double value);

  // required float money2 = 8;
  inline bool has_money2() const;
  inline void clear_money2();
  static const int kMoney2FieldNumber = 8;
  inline float money2() const;
  inline void set_money2(float value);

  // required string msg = 9;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 9;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // required bytes byteMsg = 10;
  inline bool has_bytemsg() const;
  inline void clear_bytemsg();
  static const int kByteMsgFieldNumber = 10;
  inline const ::std::string& bytemsg() const;
  inline void set_bytemsg(const ::std::string& value);
  inline void set_bytemsg(const char* value);
  inline void set_bytemsg(const void* value, size_t size);
  inline ::std::string* mutable_bytemsg();
  inline ::std::string* release_bytemsg();
  inline void set_allocated_bytemsg(::std::string* bytemsg);

  // @@protoc_insertion_point(class_scope:DB.Tbl_User)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_registertime();
  inline void clear_has_registertime();
  inline void set_has_lastlogintime();
  inline void clear_has_lastlogintime();
  inline void set_has_logintimes();
  inline void clear_has_logintimes();
  inline void set_has_islogin();
  inline void clear_has_islogin();
  inline void set_has_money1();
  inline void clear_has_money1();
  inline void set_has_money2();
  inline void clear_has_money2();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_bytemsg();
  inline void clear_has_bytemsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::uint64 registertime_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::uint32 logintimes_;
  ::google::protobuf::uint64 lastlogintime_;
  double money1_;
  bool islogin_;
  float money2_;
  ::std::string* msg_;
  ::std::string* bytemsg_;
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();

  void InitAsDefaultInstance();
  static Tbl_User* default_instance_;
};
// ===================================================================


// ===================================================================

// Tbl_User

// required int64 uid = 1;
inline bool Tbl_User::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tbl_User::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tbl_User::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tbl_User::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 Tbl_User::uid() const {
  // @@protoc_insertion_point(field_get:DB.Tbl_User.uid)
  return uid_;
}
inline void Tbl_User::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:DB.Tbl_User.uid)
}

// required int32 channel = 2;
inline bool Tbl_User::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tbl_User::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tbl_User::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tbl_User::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 Tbl_User::channel() const {
  // @@protoc_insertion_point(field_get:DB.Tbl_User.channel)
  return channel_;
}
inline void Tbl_User::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:DB.Tbl_User.channel)
}

// required uint64 registerTime = 3;
inline bool Tbl_User::has_registertime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tbl_User::set_has_registertime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Tbl_User::clear_has_registertime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Tbl_User::clear_registertime() {
  registertime_ = GOOGLE_ULONGLONG(0);
  clear_has_registertime();
}
inline ::google::protobuf::uint64 Tbl_User::registertime() const {
  // @@protoc_insertion_point(field_get:DB.Tbl_User.registerTime)
  return registertime_;
}
inline void Tbl_User::set_registertime(::google::protobuf::uint64 value) {
  set_has_registertime();
  registertime_ = value;
  // @@protoc_insertion_point(field_set:DB.Tbl_User.registerTime)
}

// required uint64 lastLoginTime = 4;
inline bool Tbl_User::has_lastlogintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Tbl_User::set_has_lastlogintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Tbl_User::clear_has_lastlogintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Tbl_User::clear_lastlogintime() {
  lastlogintime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastlogintime();
}
inline ::google::protobuf::uint64 Tbl_User::lastlogintime() const {
  // @@protoc_insertion_point(field_get:DB.Tbl_User.lastLoginTime)
  return lastlogintime_;
}
inline void Tbl_User::set_lastlogintime(::google::protobuf::uint64 value) {
  set_has_lastlogintime();
  lastlogintime_ = value;
  // @@protoc_insertion_point(field_set:DB.Tbl_User.lastLoginTime)
}

// required uint32 loginTimes = 5;
inline bool Tbl_User::has_logintimes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Tbl_User::set_has_logintimes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Tbl_User::clear_has_logintimes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Tbl_User::clear_logintimes() {
  logintimes_ = 0u;
  clear_has_logintimes();
}
inline ::google::protobuf::uint32 Tbl_User::logintimes() const {
  // @@protoc_insertion_point(field_get:DB.Tbl_User.loginTimes)
  return logintimes_;
}
inline void Tbl_User::set_logintimes(::google::protobuf::uint32 value) {
  set_has_logintimes();
  logintimes_ = value;
  // @@protoc_insertion_point(field_set:DB.Tbl_User.loginTimes)
}

// required bool isLogin = 6;
inline bool Tbl_User::has_islogin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Tbl_User::set_has_islogin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Tbl_User::clear_has_islogin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Tbl_User::clear_islogin() {
  islogin_ = false;
  clear_has_islogin();
}
inline bool Tbl_User::islogin() const {
  // @@protoc_insertion_point(field_get:DB.Tbl_User.isLogin)
  return islogin_;
}
inline void Tbl_User::set_islogin(bool value) {
  set_has_islogin();
  islogin_ = value;
  // @@protoc_insertion_point(field_set:DB.Tbl_User.isLogin)
}

// required double money1 = 7;
inline bool Tbl_User::has_money1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Tbl_User::set_has_money1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Tbl_User::clear_has_money1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Tbl_User::clear_money1() {
  money1_ = 0;
  clear_has_money1();
}
inline double Tbl_User::money1() const {
  // @@protoc_insertion_point(field_get:DB.Tbl_User.money1)
  return money1_;
}
inline void Tbl_User::set_money1(double value) {
  set_has_money1();
  money1_ = value;
  // @@protoc_insertion_point(field_set:DB.Tbl_User.money1)
}

// required float money2 = 8;
inline bool Tbl_User::has_money2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Tbl_User::set_has_money2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Tbl_User::clear_has_money2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Tbl_User::clear_money2() {
  money2_ = 0;
  clear_has_money2();
}
inline float Tbl_User::money2() const {
  // @@protoc_insertion_point(field_get:DB.Tbl_User.money2)
  return money2_;
}
inline void Tbl_User::set_money2(float value) {
  set_has_money2();
  money2_ = value;
  // @@protoc_insertion_point(field_set:DB.Tbl_User.money2)
}

// required string msg = 9;
inline bool Tbl_User::has_msg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Tbl_User::set_has_msg() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Tbl_User::clear_has_msg() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Tbl_User::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Tbl_User::msg() const {
  // @@protoc_insertion_point(field_get:DB.Tbl_User.msg)
  return *msg_;
}
inline void Tbl_User::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:DB.Tbl_User.msg)
}
inline void Tbl_User::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:DB.Tbl_User.msg)
}
inline void Tbl_User::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB.Tbl_User.msg)
}
inline ::std::string* Tbl_User::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DB.Tbl_User.msg)
  return msg_;
}
inline ::std::string* Tbl_User::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Tbl_User::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DB.Tbl_User.msg)
}

// required bytes byteMsg = 10;
inline bool Tbl_User::has_bytemsg() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Tbl_User::set_has_bytemsg() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Tbl_User::clear_has_bytemsg() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Tbl_User::clear_bytemsg() {
  if (bytemsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytemsg_->clear();
  }
  clear_has_bytemsg();
}
inline const ::std::string& Tbl_User::bytemsg() const {
  // @@protoc_insertion_point(field_get:DB.Tbl_User.byteMsg)
  return *bytemsg_;
}
inline void Tbl_User::set_bytemsg(const ::std::string& value) {
  set_has_bytemsg();
  if (bytemsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytemsg_ = new ::std::string;
  }
  bytemsg_->assign(value);
  // @@protoc_insertion_point(field_set:DB.Tbl_User.byteMsg)
}
inline void Tbl_User::set_bytemsg(const char* value) {
  set_has_bytemsg();
  if (bytemsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytemsg_ = new ::std::string;
  }
  bytemsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:DB.Tbl_User.byteMsg)
}
inline void Tbl_User::set_bytemsg(const void* value, size_t size) {
  set_has_bytemsg();
  if (bytemsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytemsg_ = new ::std::string;
  }
  bytemsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB.Tbl_User.byteMsg)
}
inline ::std::string* Tbl_User::mutable_bytemsg() {
  set_has_bytemsg();
  if (bytemsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytemsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DB.Tbl_User.byteMsg)
  return bytemsg_;
}
inline ::std::string* Tbl_User::release_bytemsg() {
  clear_has_bytemsg();
  if (bytemsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bytemsg_;
    bytemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Tbl_User::set_allocated_bytemsg(::std::string* bytemsg) {
  if (bytemsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bytemsg_;
  }
  if (bytemsg) {
    set_has_bytemsg();
    bytemsg_ = bytemsg;
  } else {
    clear_has_bytemsg();
    bytemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DB.Tbl_User.byteMsg)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DB

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DB::ChannelType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DB::ChannelType>() {
  return ::DB::ChannelType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_db_2eproto__INCLUDED
