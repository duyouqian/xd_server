// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RPC {

namespace {

const ::google::protobuf::Descriptor* RpcHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcHeader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MethodID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpc_2eproto() {
  protobuf_AddDesc_rpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpc.proto");
  GOOGLE_CHECK(file != NULL);
  RpcHeader_descriptor_ = file->message_type(0);
  static const int RpcHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcHeader, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcHeader, method_),
  };
  RpcHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcHeader_descriptor_,
      RpcHeader::default_instance_,
      RpcHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcHeader));
  ServerID_descriptor_ = file->enum_type(0);
  MethodID_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcHeader_descriptor_, &RpcHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpc_2eproto() {
  delete RpcHeader::default_instance_;
  delete RpcHeader_reflection_;
}

void protobuf_AddDesc_rpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\trpc.proto\022\003RPC\"I\n\tRpcHeader\022\035\n\006server\030"
    "\001 \002(\0162\r.RPC.ServerID\022\035\n\006method\030\002 \002(\0162\r.R"
    "PC.MethodID*\026\n\010ServerID\022\n\n\006MASTER\020\001*\036\n\010M"
    "ethodID\022\022\n\016RegisterServer\020\001B\017\n\010protocolB"
    "\003RPC", 164);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc.proto", &protobuf_RegisterTypes);
  RpcHeader::default_instance_ = new RpcHeader();
  RpcHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpc_2eproto {
  StaticDescriptorInitializer_rpc_2eproto() {
    protobuf_AddDesc_rpc_2eproto();
  }
} static_descriptor_initializer_rpc_2eproto_;
const ::google::protobuf::EnumDescriptor* ServerID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerID_descriptor_;
}
bool ServerID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MethodID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MethodID_descriptor_;
}
bool MethodID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RpcHeader::kServerFieldNumber;
const int RpcHeader::kMethodFieldNumber;
#endif  // !_MSC_VER

RpcHeader::RpcHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RPC.RpcHeader)
}

void RpcHeader::InitAsDefaultInstance() {
}

RpcHeader::RpcHeader(const RpcHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RPC.RpcHeader)
}

void RpcHeader::SharedCtor() {
  _cached_size_ = 0;
  server_ = 1;
  method_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcHeader::~RpcHeader() {
  // @@protoc_insertion_point(destructor:RPC.RpcHeader)
  SharedDtor();
}

void RpcHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpcHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcHeader_descriptor_;
}

const RpcHeader& RpcHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

RpcHeader* RpcHeader::default_instance_ = NULL;

RpcHeader* RpcHeader::New() const {
  return new RpcHeader;
}

void RpcHeader::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    server_ = 1;
    method_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RPC.RpcHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RPC.ServerID server = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RPC::ServerID_IsValid(value)) {
            set_server(static_cast< ::RPC::ServerID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_method;
        break;
      }

      // required .RPC.MethodID method = 2;
      case 2: {
        if (tag == 16) {
         parse_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RPC::MethodID_IsValid(value)) {
            set_method(static_cast< ::RPC::MethodID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RPC.RpcHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RPC.RpcHeader)
  return false;
#undef DO_
}

void RpcHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RPC.RpcHeader)
  // required .RPC.ServerID server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->server(), output);
  }

  // required .RPC.MethodID method = 2;
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->method(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RPC.RpcHeader)
}

::google::protobuf::uint8* RpcHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RPC.RpcHeader)
  // required .RPC.ServerID server = 1;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->server(), target);
  }

  // required .RPC.MethodID method = 2;
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->method(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RPC.RpcHeader)
  return target;
}

int RpcHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RPC.ServerID server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server());
    }

    // required .RPC.MethodID method = 2;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcHeader::MergeFrom(const RpcHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server()) {
      set_server(from.server());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcHeader::CopyFrom(const RpcHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpcHeader::Swap(RpcHeader* other) {
  if (other != this) {
    std::swap(server_, other->server_);
    std::swap(method_, other->method_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcHeader_descriptor_;
  metadata.reflection = RpcHeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RPC

// @@protoc_insertion_point(global_scope)
